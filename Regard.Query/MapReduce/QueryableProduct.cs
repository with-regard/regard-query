using System;
using System.Threading.Tasks;
using Regard.Query.Api;

namespace Regard.Query.MapReduce
{
    /// <summary>
    /// Represents a product that can be queried using the map/reduce system
    /// </summary>
    class QueryableProduct : IQueryableProduct
    {
        /// <summary>
        /// The key/value store dedicated to this product
        /// </summary>
        private readonly IKeyValueStore m_ProductDataStore;

        public QueryableProduct(IKeyValueStore productDataStore)
        {
            if (productDataStore == null) throw new ArgumentNullException("productDataStore");

            m_ProductDataStore = productDataStore;
        }

        /// <summary>
        /// Creates a new query builder for this product
        /// </summary>
        public IQueryBuilder CreateQueryBuilder()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Registers a query built by the query builder as active for this product
        /// </summary>
        /// <param name="queryName">A name for this query. If the query already exists then </param>
        /// <param name="query">A query generated by the query builder for this product (ie, the query builder created by <see cref="CreateQueryBuilder"></see>)</param>
        public Task RegisterQuery(string queryName, IRegardQuery query)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Runs the query with the specified name against the database
        /// </summary>
        public Task<IResultEnumerator<QueryResultLine>> RunQuery(string queryName)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieves the object that can administer the users of this project
        /// </summary>
        public IUserAdmin Users { get { throw new NotImplementedException(); } }
    }
}
